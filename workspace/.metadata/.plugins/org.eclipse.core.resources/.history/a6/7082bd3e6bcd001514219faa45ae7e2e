// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.WestTorranceSwagbotics2016;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.IOException;

import org.usfirst.frc5124.WestTorranceSwagbotics2016.commands.*;
import org.usfirst.frc5124.WestTorranceSwagbotics2016.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    
    private final static String[] GRIP_ARGS = new String[] {
    		"/usr/local/frc/JRE/bin/java", "-jar", 
    		"/home/lvuser/grip.jar", "/home/lvuser/project.grip"
    };
    
    CameraServer usbCamera; 
    NetworkTable convexReport;
    
    public static OI oi;
    public static Camera camera;
    public static EncoderDriveTrain encoderDriveTrain;
    public static PIDHandler pidHandler;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Catapult catapult;
    public static Intake intake;

	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    /*
    	usbCamera = CameraServer.getInstance();
    	usbCamera.setQuality(50);
    	usbCamera.startAutomaticCapture("cam1");
    	*/
    	
    	try {
    		Runtime.getRuntime().exec(GRIP_ARGS);
    	} catch(IOException e) {
    		e.printStackTrace();
    	}
    	
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        catapult = new Catapult();
        intake = new Intake();
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        camera = new Camera();
        encoderDriveTrain = new EncoderDriveTrain();
        pidHandler = new PIDHandler();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new DoNothing();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        //Runtime.getRuntime().exec(new String[]{"/usr/local/frc/JRE/bin/java", "-jar", "grip.jar", camera.grip});
        convexReport = NetworkTable.getTable("GRIP/convexHullReport");
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();

        RobotMap.driveTrainRobotDrive.setMaxOutput(0.5);
        camera.getReportValues();
       
        try{
        	
        
        
	        SmartDashboard.putNumber("CenterX", camera.centerX[0]);
	        SmartDashboard.putNumber("CenterY", camera.centerY[0]);
	        SmartDashboard.putNumber("Width", camera.width[0]);
	        SmartDashboard.putNumber("Heigh", camera.height[0]);
	        SmartDashboard.putNumber("Area", camera.area[0]);
	        SmartDashboard.putString("Status", "Target Found");
	        SmartDashboard.putString("Turn", camera.getDegrees() + " degrees");
	        SmartDashboard.putNumber("Distance", camera.getDistance());
        } catch (Exception e) {
        	SmartDashboard.putString("Status", "Target Not Found");
        }
       
        
        
        
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
