// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.WestTorranceSwagbotics2016;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.IOException;

import org.usfirst.frc5124.WestTorranceSwagbotics2016.commands.*;
import org.usfirst.frc5124.WestTorranceSwagbotics2016.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    public static Command defenseType;
    public static Command defenseSlot;
    DigitalInput onesPlaceSwitch;
    DigitalInput tensPlaceSwitch;
    public static DigitalInput shootSwitch;
    public static boolean fireWhenReady = false;
    public static boolean defenseIsRight = true;
    public static boolean holdOnToYourButts = false;
    String fireString = "";
    String autoString = "";
    String defenseDirection = "";
    boolean button1pressed = false;
    boolean button2pressed = false;
    boolean button3pressed = false;
    CameraServer usbCamera; 
    NetworkTable convexReport;
    public static OI oi;
    public static Camera camera;
    public static FlashLight flashLight;
    public static EncoderDriveTrain encoderDriveTrain;
    public static PIDHandler pidHandler;
    public static DriveTrain driveTrain;
    public static Catapult catapult;
    public static Intake intake;

    public void robotInit() {
    	RobotMap.init();
    	
    	onesPlaceSwitch = new DigitalInput(8);
    	tensPlaceSwitch = new DigitalInput(7);
    	shootSwitch = new DigitalInput(9);
    
    	usbCamera = CameraServer.getInstance();
    	usbCamera.setQuality(50);
    	usbCamera.startAutomaticCapture("cam1");
    
        driveTrain = new DriveTrain();
        catapult = new Catapult();
        intake = new Intake();
        camera = new Camera();
        encoderDriveTrain = new EncoderDriveTrain();
        pidHandler = new PIDHandler();
        flashLight = new FlashLight();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        autonomousCommand = new DoNothingAuto();  
        convexReport = NetworkTable.getTable("GRIP/convexHullReport");
    }

    public void disabledInit(){
    	fireWhenReady = false;
    	defenseIsRight = true;
    	holdOnToYourButts = false;
    	//Robot.flashLight.off();
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        
     
       // SmartDashboard.putBoolean("shoot", shootSwitch.get());
        
        if(oi.driver.getRawButton(2) && !button2pressed) {
        	defenseIsRight = !defenseIsRight;
        	button2pressed = true;
        } else if (!oi.driver.getRawButton(2) && button2pressed) {
        	button2pressed = false;
        }
        
        if(defenseIsRight) {
        	defenseDirection = "right";
        } else {
        	defenseDirection = "left";
        }
        
        if(oi.getAutoSelector().getRawButton(4)) {
        	fireString = "SHOOTING";
        	fireWhenReady = true;
        } else {
        	fireString = "NOT SHOOTING";
        	fireWhenReady = false;
        }
        
      /*
        if(!onesPlaceSwitch.get() && !tensPlaceSwitch.get()) {
        	autoString = "Do Nothing - 00";
        	autonomousCommand = new DoNothing();
        } else if(!onesPlaceSwitch.get() && tensPlaceSwitch.get()) {
        	autoString = "Rock Wall - 10";
        	autonomousCommand = new RockWallAuto();
        } else if(onesPlaceSwitch.get() && tensPlaceSwitch.get()) {
        	autoString = "Everything English - 11";
        	autonomousCommand = new MoatAuto();
        } else if(onesPlaceSwitch.get() && !tensPlaceSwitch.get()) {
        	autoString = "Cheval - 01";
        	autonomousCommand = new CrossChevalDeFrise();
        }
      */
        SmartDashboard.putString("Auto Is:", autoString);
        SmartDashboard.putString("AutoShoot", fireString);
        SmartDashboard.putString("Defense is: ", defenseDirection);
        /*if(oi.getAutoSelector().getRawButton(1)) {
        	if(oi.getAutoSelector().getRawButton(5) && !oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
        		autoString = "!UNTESTED!PORTCULLIS";
        		autonomousCommand = new CrossPorteCullis();
            } else if(!oi.getAutoSelector().getRawButton(5) && !oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
            	autoString = "Low Bar";
        		autonomousCommand = new LowBarAuto();
            } else if(oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
            	autoString = "ChevaldeFrise";
            	autonomousCommand = new CrossChevalDeFrise();
            } else if(oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && oi.getAutoSelector().getRawButton(3)) {
            	autoString = "Rough Terrain";
        		autonomousCommand = new RoughTerrainAuto();
            } else if(!oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
            	autoString = "Rock Wall";
        		autonomousCommand = new RockWallAuto();
            } else if(!oi.getAutoSelector().getRawButton(5) && !oi.getAutoSelector().getRawButton(2) && oi.getAutoSelector().getRawButton(3)) {
            	autoString = "Moat";
        		autonomousCommand = new MoatAuto();
            } else if(!oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && oi.getAutoSelector().getRawButton(3)) {
            	autoString = "Ramparts";
        		autonomousCommand = new RampartAuto();
            }
        } else {
        	autoString = "Do Nothing";
        	autonomousCommand = new DoNothingAuto();
        }
        */
    }

    public void autonomousInit() {
    	//Robot.flashLight.off();
    	/*
    	if(!onesPlaceSwitch.get() && !tensPlaceSwitch.get()) {
    		autonomousCommand = new DoNothingAuto();
        } else if(!onesPlaceSwitch.get() && tensPlaceSwitch.get()) {
        	autonomousCommand = new GeneralDefenseAuto();
        } else if(onesPlaceSwitch.get() && tensPlaceSwitch.get()) {
        	autonomousCommand = new CrossPorteCullis();
        } else if(onesPlaceSwitch.get() && !tensPlaceSwitch.get()) {
        	autonomousCommand = new CrossChevalDeFrise();
        }*/
    	
    	if(oi.getAutoSelector().getRawButton(1)) {
        	if(oi.getAutoSelector().getRawButton(5) && !oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
        		autonomousCommand = new GeneralDefenseAuto();
            } else if(!oi.getAutoSelector().getRawButton(5) && !oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
        		autonomousCommand = new LowBarAuto();
            } else if(oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
            	autonomousCommand = new CrossChevalDeFrise();
            } else if(oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && oi.getAutoSelector().getRawButton(3)) {
        		autonomousCommand = new RoughTerrainAuto();
            } else if(!oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && !oi.getAutoSelector().getRawButton(3)) {
        		autonomousCommand = new RockWallAuto();
            } else if(!oi.getAutoSelector().getRawButton(5) && !oi.getAutoSelector().getRawButton(2) && oi.getAutoSelector().getRawButton(3)) {
        		autonomousCommand = new MoatAuto();
            } else if(!oi.getAutoSelector().getRawButton(5) && oi.getAutoSelector().getRawButton(2) && oi.getAutoSelector().getRawButton(3)) {
        		autonomousCommand = new RampartAuto();
            }
        } else {
        	autonomousCommand = new DoNothingAuto();
        }
    	
    	if (autonomousCommand != null) autonomousCommand.start();
    	
        RobotMap.driveTrainRobotDrive.setMaxOutput(1);
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Encoder", encoderDriveTrain.getEncoder());
        SmartDashboard.putNumber("Encoder Distance", encoderDriveTrain.getEncoderDistance());
        camera.getReportValues();
    }

    public void teleopInit() {
    	//Robot.flashLight.off();
        if (autonomousCommand != null) autonomousCommand.cancel();
        encoderDriveTrain.resetEncoder();
        Robot.intake.setSetpoint(4.8);
        Robot.intake.enable();
    }

    public void teleopPeriodic() {
        Scheduler.getInstance().run();

        RobotMap.driveTrainRobotDrive.setMaxOutput(0.7);
        
        
        camera.getReportValues();
        
        SmartDashboard.putNumber("Pot", intake.getPot());
    }

    public void testPeriodic() {
        LiveWindow.run();
    }
}
