// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.WestTorranceSwagbotics2016;

import org.usfirst.frc5124.WestTorranceSwagbotics2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc5124.WestTorranceSwagbotics2016.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    
    public Joystick driver;
    public Joystick operator;
    public JoystickButton launch;
    public JoystickButton load;
    public JoystickButton takeIn;
    public JoystickButton exhaust;
    public JoystickButton lineUp;
    public JoystickButton stutter;
    public JoystickButton grab;
    public JoystickButton release;
    public JoystickButton intakeUp;
    public JoystickButton intakeDown;
    public JoystickButton intakeDisable;
    public JoystickButton afterLift;
    

    public OI() {
        
    	driver = new Joystick(0);
        operator = new Joystick(1);
        
        exhaust = new JoystickButton(operator, 5);
        exhaust.whileHeld(new IntakeExhaust());
        takeIn = new JoystickButton(operator, 4);
        takeIn.whileHeld(new IntakeIntake());
        load = new JoystickButton(operator, 2);
        load.whenPressed(new CatapultLoad());
        launch = new JoystickButton(operator, 3);
        launch.whenPressed(new FullShot());
        lineUp = new JoystickButton(driver, 8);
        lineUp.whileHeld(new LineUp());
        /*
        stutter = new JoystickButton(operator, 1);
        stutter.whenPressed(new StutterShot());
        */
        //grab = new JoystickButton(operator, 8);
        //grab.whenPressed(new FlipperGrab());
        //release = new JoystickButton(operator, 9);
        //release.whenPressed(new FlipperRelease());
        intakeUp = new JoystickButton(operator, 9);
        intakeUp.whenPressed(new IntakeRetract());
        intakeDown = new JoystickButton(operator, 8);
        intakeDown.whenPressed(new IntakeDown());
        intakeDisable = new JoystickButton(operator, 1);
        intakeDisable.whileHeld(new IntakeDisablePID());
        
    }

    public Joystick getDriver() {
        return driver;
    }

    public Joystick getOperator() {
        return operator;
    }
    
    public double getSlider() {
    	return (operator.getRawAxis(2)/2);
    }
    
    public double getLeft() {
    	
    	if(Math.abs(driver.getRawAxis(1)) > 0.15  && Math.abs(driver.getRawAxis(1)) <= 1) {
    		return driver.getRawAxis(1);
    	} else {
    		return 0;
    	}
    }
    	
    public double getRight() {
        	
       	if(Math.abs(driver.getRawAxis(3)) > 0.15 && Math.abs(driver.getRawAxis(3)) <= 1) {
       		return driver.getRawAxis(3);
       	} else {
       		return 0;
        }	
    }
}

