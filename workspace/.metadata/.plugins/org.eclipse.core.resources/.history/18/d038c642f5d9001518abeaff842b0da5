// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



package org.usfirst.frc5124.WestTorranceSwagbotics2016.subsystems;

import org.usfirst.frc5124.WestTorranceSwagbotics2016.Robot;
import org.usfirst.frc5124.WestTorranceSwagbotics2016.RobotMap;
import org.usfirst.frc5124.WestTorranceSwagbotics2016.commands.*;

import edu.wpi.first.wpilibj.ADXL362;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class DriveTrain extends PIDSubsystem {

    public DriveTrain() {
    	super("DriveTrain", 0.17, 0, 0.15);
        setAbsoluteTolerance(0.1);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("DriveTrain", "PIDSubsystem Controller", getPIDController());
	}

	private final SpeedController left1 = RobotMap.driveTrainLeft1;
    private final SpeedController left2 = RobotMap.driveTrainLeft2;
    private final SpeedController right1 = RobotMap.driveTrainRight1;
    private final SpeedController right2 = RobotMap.driveTrainRight2;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final Compressor compressor = RobotMap.driveTrainCompressor;
    private final ADXL362 accel = RobotMap.accel; 
	private final ADXRS450_Gyro gyro = RobotMap.gyro;

    protected double returnPIDInput() {
        
        return gyro.getAngle();

    }

    protected void usePIDOutput(double output) {
    	Robot.pidHandler.writeGyroPID(output);
    }
    
    Robot robot = new Robot();
    
    public void initDefaultCommand() {
        setDefaultCommand(new DriveWithJoystick());
    }
    
    public void arcade(Joystick joy) {
    	robotDrive.arcadeDrive(joy);
    }
    
    public void startCompressor() {
    	compressor.start();
    }
    
    public void stop() {
    	robotDrive.arcadeDrive(0, 0);
    }   
    
    public void tank() {
    	robotDrive.tankDrive(Robot.oi.getLeft(), Robot.oi.getRight());
    }
    
	public double getGyro() {
		return gyro.getAngle();
	}

	public void calibrateGyro() {
		gyro.calibrate();
	}
    
    public double getGyroRotationRate() {
    	return gyro.getRate();
    }
    
}

